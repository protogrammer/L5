<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Heapsort</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <script>
        const n = {{len .indices}};

        const get = (i) => fetch(`/api/get?i=${i}`, {
            method: 'GET',
        })
            .then(data => data.json())
            .then(obj => Number(obj.value));

        const set = (i, val) => fetch(`/api/set?i=${i}&v=${val}`, {
            method: 'PUT',
        }).then(() => {
            document.getElementById(`elem${i}`).innerHTML = String(val);
        })

        const sleeper = (f) =>
            new Promise(resolve =>
                setTimeout(() => resolve(f()), 250))

        const swap = (i, j) =>
            Promise.all([i, j].map(get)).then(([x, y]) =>
                Promise.all([
                    set(i, y),
                    set(j, x),
                ]).then(() => Promise.resolve())
            );

        const compare = (i, j) =>
            Promise.all([i, j].map(get))
                .then(([x, y]) => x - y);

        const maxSlice = (start, lim) => {
            const f = (acc, i) => i === lim ? Promise.resolve(acc) :
                compare(acc, i).then(c =>
                    c >= 0 ? f(acc, i + 1) : f(i, i + 1));
            return f(start, start + 1);
        }

        const heapsort = () => {
            const base = 4;

            const siftDown = (i, lim) => i * base + 1 >= lim ? Promise.resolve() :
                maxSlice(i * base + 1, Math.min(lim, i * base + 1 + base))
                    .then(child => compare(i, child)
                        .then(c => c >= 0 ? Promise.resolve() :
                            swap(i, child).then(() => siftDown(child, lim))));

            const heapify = (i) => i < 0 ? Promise.resolve() :
                siftDown(i, n).then(() => heapify(i - 1));

            const body = (last) => last < 1 ? Promise.resolve() :
                swap(0, last)
                    .then(() => siftDown(0, last))
                    .then(() => body(last - 1));

            return heapify(n >> 1)
                .then(() => body(n - 1));
        }

        const shuffle = () => {
            const f = (i) => i < n ?
                swap(i, i + Math.floor(Math.random() * (n - i)))
                    .then(() => f(i + 1))
                : Promise.resolve();
            return f(0);
        }
    </script>
</head>
<body>
    <table class="table">
    <tr>
    {{range .indices}}
         <td id="elem{{.}}">{{index $.numbers .}}</td>
    {{end}}
    </tr>
    </table>
    <button onclick="shuffle()">Shuffle!</button>
    <button onclick="heapsort()">Sort!</button>
</body>
</html>
